% Copyright Purdue University/Matthew P Ward/Youssef Beshay (2024)
% All code is made available using the following license: GNU General Public License v2.0. 
% If you use any part of this code for any purpose, you must include a copy of the original source code, license and authors with the derivative code or cite the original code in any manuscript or research product produced:
% N. P. Biscola et al., “Laterality, Sexual Dimorphism, and Heterogeneity of the Human Vagal Projectome Shape Neuromodulation to Vagus Nerve Stimulation,” Communications Biology, 2024. 

%% This script is used to produce Figure 10 of the manuscript. 
clc;clear;close all;
%% Start here - User Inputs
fascicleNumber = 7; %choose between 2,3, and 7 (including sub-fascicles 7.1,7.2,and 7.3)
ConductionDistancemmEditField = 10; %conduction distance between the stimulating and recording cuff in mm
RecordingCuffLengthmmEditField = 2; % length of the recording cuff in mm
UncorrectedCheckBox = 0; %0 to use SAE diameter data. Otherwise, using the uncorrected diameter from the area of a circle.  
DiameterScalingEditField = 0; % to multiply all the diameters by a certain factor. Keep as 0 to use the original diameters
folderName = 'HAPI Figures'; %folder name to store the figures generated by the script
% size of the figures exported in centimeters
figureWidthCM = 14;
figureHeightCM = 8;

%% Processing user inputs
fascicleID = string(strcat('Fascicle', {' '}, num2str(fascicleNumber)));
currentFolder = pwd;
folderName = string(strcat(currentFolder, '/', folderName));
% stimulation parameters
conductionDist = ConductionDistancemmEditField / 1e3;
cuffLength = RecordingCuffLengthmmEditField / 1e3;
axon_diameter = 1 / 1e3;
stimulationString = strcat('CD.',num2str(ConductionDistancemmEditField),'mmCL.',num2str(RecordingCuffLengthmmEditField), 'mm');

%% start of code
if (strcmp(fascicleID, 'Fascicle 2'))
    full_data_myelinated = readmatrix('FASCICLE2_Myelinated.xlsx','Sheet',1);
    full_data_unmyelinated = readmatrix('FASCICLE2_Unmyelinated.xlsx','Sheet',1);
    fascicleImage = imread('FASCICLE2_TEM.tif');
    conv_fac = 1/0.0119; 
    markerScaling = 25; %this is the scaling factor to plot

end

if (strcmp(fascicleID, 'Fascicle 3'))
    full_data_myelinated = readmatrix('FASCICLE3_Myelinated.xlsx','Sheet',1);
    full_data_unmyelinated = readmatrix('FASCICLE3_Unmyelinated.xlsx','Sheet',1);
    fascicleImage = imread('FASCICLE3_TEM.jpg');
    conv_fac = 1/0.0119; 
    scaling_fact = 0.7;
    fascicleImage = imresize(fascicleImage, scaling_fact);
    conv_fac = conv_fac * scaling_fact;
    markerScaling = 10; %this is the scaling factor to plot

end

if (strcmp(fascicleID, 'Fascicle 7'))
    full_data_myelinated = readmatrix('FASCICLE7_Myelinated.xlsx','Sheet',1);
    full_data_unmyelinated = readmatrix('FASCICLE7_Unmyelinated.xlsx','Sheet',1);
    fascicleImage = imread('FASCICLE7_TEM.tif');
    conv_fac = 1/0.008734; 
    markerScaling = 1; %this is the scaling factor to plot
end

if (strcmp(fascicleID, 'Fascicle 7.1'))
    full_data_myelinated = readmatrix('FASCICLE7.1_Myelinated.csv');
    full_data_unmyelinated = readmatrix('FASCICLE7.1_Unmyelinated.csv');
    fascicleImage = imread('FASCICLE7_TEM.tif');
    % conv_fac = 1/0.0235; %this is what Dr. Biscola gave me
    conv_fac = 1/0.008734;
    markerScaling = 1; %this is the scaling factor to plot

end

if (strcmp(fascicleID, 'Fascicle 7.2'))
    full_data_myelinated = readmatrix('FASCICLE7.2_Myelinated.xlsx','Sheet',1);
    full_data_unmyelinated = readmatrix('FASCICLE7.2_Unmyelinated.xlsx','Sheet',1);
    fascicleImage = imread('FASCICLE7_TEM.tif');
    conv_fac = 1/0.008734;
    markerScaling = 1; %this is the scaling factor to plot; make 20 for fascicle 2 and 10 for fascicle 3


end

if (strcmp(fascicleID, 'Fascicle 7.3'))
    full_data_myelinated = readmatrix('FASCICLE7.3_Myelinated.xlsx','Sheet',1);
    full_data_unmyelinated = readmatrix('FASCICLE7.3_Unmyelinated.xlsx','Sheet',1);
    fascicleImage = imread('FASCICLE7_TEM.tif');
    conv_fac = 1/0.008734;
    markerScaling = 1; %this is the scaling factor to plot; make 20 for fascicle 2 and 10 for fascicle 3
end

%image setup
im_height = size(fascicleImage, 1);
im_width = size(fascicleImage, 2);
x_max = im_width/conv_fac;
y_max = im_height/conv_fac;
xWorldLimits = [0 x_max];
yWorldLimits = [0 y_max];
RA = imref2d(size(fascicleImage),xWorldLimits,yWorldLimits);

x_scaling = 1;
y_scaling = 1;

figure('Position', [100, 100, 1000, 800]); % Adjust the last two values as needed

ax = gca;
ax.OuterPosition = [0.01, 0.01, 0.99, 0.99]; % Adjust these values as needed

if size(fascicleImage,3) ~= 3
    fascicle_img_gray = rgb2gray(fascicleImage(1:end, 1:end, 1:3));
    imshow(fascicle_img_gray,RA);
else
    imshow(fascicleImage,RA);
end
hold on;
set(gca,'YDir','normal'); %reverse for fascicle 3

% if (strcmp(fascicleID, 'Fascicle 3'))
%     set(fascicleDisplay,'YDir','reverse');
% end

axis(gca,[0 x_max 0 y_max]);


%% myelinated
myelination = 1;
colorsRGB = [255 255 0; 255 0 255; 0 255 0; 0 255 255; 255 0 0]./255.*0.7;

popScaling = 1; %initializes popScaling
if myelination %myelinated fibers
    if not(UncorrectedCheckBox) %if unchecked, user wants SAE data (default) YB 8/1/23
        diameterCol = 19;
        gratioCol = 22; %for SAE g-ratio
        popScaling = mean(full_data_myelinated(:,11))/mean(full_data_myelinated(:,19));


    else
        diameterCol = 11; 
        gratioCol = 14;
    end

    centroidXCol = 3;
    centroidYCol = 4;
    full_data = full_data_myelinated;

else 
    if not(UncorrectedCheckBox) 
        diameterCol = 9; %if unchecked, users want SAE data (default) YB 5/4/23
        popScaling = mean(full_data_unmyelinated(:,7))/mean(full_data_unmyelinated(:,9));
    else
        diameterCol = 7;
    end

    centroidXCol = 2;
    centroidYCol = 3;
    full_data = full_data_unmyelinated;

end

if not(DiameterScalingEditField)
    DiameterScalingEditField = 1;
end 
diameterScaling = DiameterScalingEditField;

%updates diameters in the full table with the scaled diameters
full_data(:,diameterCol) = diameterScaling * full_data(:,diameterCol);
% omits diameter values that are zeros
omitIndex = find(full_data(:,diameterCol) == 0); %Youssef added 4/11
full_data(omitIndex,:) = [];

if logical(myelination)
    fascicle2Data = readmatrix('FASCICLE2_Myelinated.xlsx','Sheet',1);
    fascicle2Diameters = fascicle2Data(:,diameterCol);
    fascicle3Data = readmatrix('FASCICLE3_Myelinated.xlsx','Sheet',1);
    fascicle3Diameters = fascicle3Data(:,diameterCol);
    fascicle7Data = readmatrix('FASCICLE7_Myelinated.xlsx','Sheet',1);
    fascicle7Diameters = fascicle7Data(:,diameterCol);
    diameterMaximum = [max(fascicle2Diameters), max(fascicle3Diameters), max(fascicle7Diameters)];
    diameterMinimum = [min(fascicle2Diameters), min(fascicle3Diameters), min(fascicle7Diameters)];

else 
    fascicle2Data = readmatrix('FASCICLE2_Unmyelinated.xlsx','Sheet',1);
    fascicle2Diameters = fascicle2Data(:,diameterCol);
    fascicle3Data = readmatrix('FASCICLE3_Unmyelinated.xlsx','Sheet',1);
    fascicle3Diameters = fascicle3Data(:,diameterCol);
    fascicle7Data = readmatrix('FASCICLE7_Unmyelinated.xlsx','Sheet',1);
    fascicle7Diameters = fascicle7Data(:,diameterCol);
    diameterMaximum = [max(fascicle2Diameters), max(fascicle3Diameters), max(fascicle7Diameters)];
    diameterMinimum = [min(fascicle2Diameters), min(fascicle3Diameters), min(fascicle7Diameters)];

end

allDiameters = full_data(:,diameterCol); %this is the column with all the diameters in the table/matrix
allDiameters_numbers = ones(size(allDiameters));

[myelinatedCNAPdata] = AP_calculations(conductionDist, cuffLength, allDiameters, allDiameters_numbers, axon_diameter, myelination);

fiberDiameters_myelinated_unmyelinated = allDiameters; %the unmyelinated axons will be added to this later to plot the overall histogram

diameterBin = (max(diameterMaximum)-min(diameterMinimum))/5;
defaultLimits = min(diameterMinimum):diameterBin:max(diameterMaximum);
lim1 = defaultLimits(2);
lim2 = defaultLimits(3);
lim3 = defaultLimits(4);
lim4 = defaultLimits(5);
[idx1, idx2, idx3, idx4, idx5] = morphology_custom_Youssef2(lim1, lim2, lim3, lim4, allDiameters);
% diameters1 = allDiameters(idx1);
% diameters2 = allDiameters(idx2);
% diameters3 = allDiameters(idx3);
% diameters4 = allDiameters(idx4);
% diameters5 = allDiameters(idx5);

% defines a constant c if y values are negative
c = 1; 
if full_data(1,centroidYCol) < 0
    c = -1;
end

scatter(full_data(idx1,centroidXCol)*x_scaling, c*full_data(idx1,centroidYCol)*y_scaling, allDiameters(idx1) * markerScaling * popScaling, 'o', 'filled', 'MarkerFaceColor', colorsRGB(1,:), 'MarkerEdgeColor', colorsRGB(1,:));
scatter(full_data(idx2,centroidXCol)*x_scaling, c*full_data(idx2,centroidYCol)*y_scaling, allDiameters(idx2) * markerScaling * popScaling, 'o', 'filled', 'MarkerFaceColor', colorsRGB(2,:), 'MarkerEdgeColor', colorsRGB(2,:));
scatter(full_data(idx3,centroidXCol)*x_scaling, c*full_data(idx3,centroidYCol)*y_scaling, allDiameters(idx3) * markerScaling * popScaling, 'o', 'filled', 'MarkerFaceColor', colorsRGB(3,:), 'MarkerEdgeColor', colorsRGB(3,:));
scatter(full_data(idx4,centroidXCol)*x_scaling, c*full_data(idx4,centroidYCol)*y_scaling, allDiameters(idx4) * markerScaling * popScaling, 'o', 'filled', 'MarkerFaceColor', colorsRGB(4,:), 'MarkerEdgeColor', colorsRGB(4,:));
scatter(full_data(idx5,centroidXCol)*x_scaling, c*full_data(idx5,centroidYCol)*y_scaling, allDiameters(idx5) * markerScaling * popScaling, 'o', 'filled', 'MarkerFaceColor', colorsRGB(5,:), 'MarkerEdgeColor', colorsRGB(5,:));

hold on;

%% myelination = 0
myelination = 0;
colorsRGB = [255 255 0; 255 0 255; 0 255 0; 0 255 255; 255 0 0]./255;

popScaling = 1; %initializes popScaling
if myelination %myelinated fibers
    if not(UncorrectedCheckBox) %if unchecked, user wants SAE data (default) YB 8/123
        diameterCol = 19;
        gratioCol = 22; %for SAE g-ratio
        popScaling = mean(full_data_myelinated(:,11))/mean(full_data_myelinated(:,19));


    else
        diameterCol = 11; 
        gratioCol = 14;
    end

    centroidXCol = 3;
    centroidYCol = 4;
    full_data = full_data_myelinated;

else 
    if not(UncorrectedCheckBox) 
        diameterCol = 9; %if unchecked, users want SAE data (default) YB 5/4/23
        popScaling = mean(full_data_unmyelinated(:,7))/mean(full_data_unmyelinated(:,9));
    else
        diameterCol = 7;
    end

    centroidXCol = 2;
    centroidYCol = 3;
    full_data = full_data_unmyelinated;

end

if not(DiameterScalingEditField)
    DiameterScalingEditField = 1;
end 
diameterScaling = DiameterScalingEditField;

%updates diameters in the full table with the scaled diameters
full_data(:,diameterCol) = diameterScaling * full_data(:,diameterCol);
% omits diameter values that are zeros
omitIndex = find(full_data(:,diameterCol) == 0); %Youssef added 4/11
full_data(omitIndex,:) = [];

if logical(myelination)
    fascicle2Data = readmatrix('FASCICLE2_Myelinated.xlsx','Sheet',1);
    fascicle2Diameters = fascicle2Data(:,diameterCol);
    fascicle3Data = readmatrix('FASCICLE3_Myelinated.xlsx','Sheet',1);
    fascicle3Diameters = fascicle3Data(:,diameterCol);
    fascicle7Data = readmatrix('FASCICLE7_Myelinated.xlsx','Sheet',1);
    fascicle7Diameters = fascicle7Data(:,diameterCol);
    diameterMaximum = [max(fascicle2Diameters), max(fascicle3Diameters), max(fascicle7Diameters)];
    diameterMinimum = [min(fascicle2Diameters), min(fascicle3Diameters), min(fascicle7Diameters)];

else 
    fascicle2Data = readmatrix('FASCICLE2_Unmyelinated.xlsx','Sheet',1);
    fascicle2Diameters = fascicle2Data(:,diameterCol);
    fascicle3Data = readmatrix('FASCICLE3_Unmyelinated.xlsx','Sheet',1);
    fascicle3Diameters = fascicle3Data(:,diameterCol);
    fascicle7Data = readmatrix('FASCICLE7_Unmyelinated.xlsx','Sheet',1);
    fascicle7Diameters = fascicle7Data(:,diameterCol);
    diameterMaximum = [max(fascicle2Diameters), max(fascicle3Diameters), max(fascicle7Diameters)];
    diameterMinimum = [min(fascicle2Diameters), min(fascicle3Diameters), min(fascicle7Diameters)];

end

allDiameters = full_data(:,diameterCol); %this is the column with all the diameters in the table/matrix
allDiameters_numbers = ones(size(allDiameters));
[unmyelinatedCNAPdata] = AP_calculations(conductionDist, cuffLength, allDiameters, allDiameters_numbers, axon_diameter, myelination);

fiberDiameters_myelinated_unmyelinated = [fiberDiameters_myelinated_unmyelinated; allDiameters]; %adds unmyelnated fibers to the list
diameterBin = (max(diameterMaximum)-min(diameterMinimum))/5;
defaultLimits = min(diameterMinimum):diameterBin:max(diameterMaximum);
lim1 = defaultLimits(2);
lim2 = defaultLimits(3);
lim3 = defaultLimits(4);
lim4 = defaultLimits(5);
[idx1, idx2, idx3, idx4, idx5] = morphology_custom_Youssef2(lim1, lim2, lim3, lim4, allDiameters);
diameters1 = allDiameters(idx1);
diameters2 = allDiameters(idx2);
diameters3 = allDiameters(idx3);
diameters4 = allDiameters(idx4);
diameters5 = allDiameters(idx5);

% defines a constant c if y values are negative
c = 1; 
if full_data(1,centroidYCol) < 0
    c = -1;
end

scatter(full_data(idx1,centroidXCol)*x_scaling, c*full_data(idx1,centroidYCol)*y_scaling, allDiameters(idx1) * markerScaling * popScaling, 'o', 'filled', 'MarkerFaceColor', colorsRGB(1,:), 'MarkerEdgeColor', colorsRGB(1,:));
scatter(full_data(idx2,centroidXCol)*x_scaling, c*full_data(idx2,centroidYCol)*y_scaling, allDiameters(idx2) * markerScaling * popScaling, 'o', 'filled', 'MarkerFaceColor', colorsRGB(2,:), 'MarkerEdgeColor', colorsRGB(2,:));
scatter(full_data(idx3,centroidXCol)*x_scaling, c*full_data(idx3,centroidYCol)*y_scaling, allDiameters(idx3) * markerScaling * popScaling, 'o', 'filled', 'MarkerFaceColor', colorsRGB(3,:), 'MarkerEdgeColor', colorsRGB(3,:));
scatter(full_data(idx4,centroidXCol)*x_scaling, c*full_data(idx4,centroidYCol)*y_scaling, allDiameters(idx4) * markerScaling * popScaling, 'o', 'filled', 'MarkerFaceColor', colorsRGB(4,:), 'MarkerEdgeColor', colorsRGB(4,:));
scatter(full_data(idx5,centroidXCol)*x_scaling, c*full_data(idx5,centroidYCol)*y_scaling, allDiameters(idx5) * markerScaling * popScaling, 'o', 'filled', 'MarkerFaceColor', colorsRGB(5,:), 'MarkerEdgeColor', colorsRGB(5,:));

hold on;

%% final setup
% plotting features
% title(fascicleDisplay, 'Axons in the Vagus Nerve Segment', 'FontSize', 18);
xlabel("X (\mum)", "FontSize",20, "FontWeight","bold");
ylabel("Y (\mum)", "FontSize",20,"FontWeight","bold");
fontsize(gca, 25, 'points');
set(gca,'LooseInset',get(gca,'TightInset'));
set(gca, 'FontWeight','bold');
%continue here
if (strcmp(fascicleID, 'Fascicle 7')) || (strcmp(fascicleID, 'Fascicle 7.1')) || (strcmp(fascicleID, 'Fascicle 7.2')) || (strcmp(fascicleID, 'Fascicle 7.3')) 
    %these are the true dimensions of the fascicle in microns
    newXLim = 403.986145;
    newYLim = 394.679749;

    currentXLim = max(xlim(gca)); %gets the upper bound of the current x axis
    currentYLim = max(ylim(gca));

    X_factor = newXLim/currentXLim;
    Y_factor = newYLim/currentYLim; 

    %see the label instead of ticks 
    % Set new tick values
    set(gca, 'XTick', [0 200 400]./X_factor);
    xticklabels(gca, [0 200 400]);
    set(gca, 'YTick', [0 100 200 300]./Y_factor);
    yticklabels(gca, [0 100 200 300]);
end
set(gca,'LooseInset',get(gca,'TightInset'));
set(gcf,'units','centimeters','position',[0,0,figureWidthCM,figureHeightCM+5]);

exportgraphics(gca, fullfile(folderName, strcat('TEM_myelinated_Unmyelinated_', 'Fascicle', num2str(fascicleNumber), '.tiff')),'Resolution',600,'BackgroundColor','white');
grid on;
hold off;

%% finding the variables to use for the composite CNAP 
timeMyelinated = myelinatedCNAPdata.tms_reconstructed;
timeUnmyelinated = unmyelinatedCNAPdata.tms_reconstructed;

if isequal(timeMyelinated,timeUnmyelinated) %should be equal
    timeOverallCNAP = timeMyelinated;
else
    disp('Time Vectors Not Equal for Myelinated Fibers and Unmyelinated Axons')
    return
end

% relevant signals
signalMyelinated = myelinatedCNAPdata.reconstructedCAP;
signalUnmyelinated = unmyelinatedCNAPdata.reconstructedCAP;
overallCNAP = signalMyelinated + signalUnmyelinated;

%% Figure for Final Manuscript; Composite Figure
figure();
h = histogram(fiberDiameters_myelinated_unmyelinated);
h.FaceColor = [0 0 0];
ylabel('Count', 'FontSize',35,'FontWeight','bold');
xlabel('Diameter (\mum)','FontSize',35,'FontWeight','bold');
set(gca, 'TickDir', 'out');
set(gca, 'XMinorTick', 'on', 'TickDir', 'out');
fontsize(gca, 25, 'points');
set(gca, 'FontWeight','bold');
ylim([0 2200]);
set(gca,'LooseInset',get(gca,'TightInset'));
set(gcf,'units','centimeters','position',[0,0,figureWidthCM,figureWidthCM])
exportgraphics(gca, fullfile(folderName, strcat('compositeHistogram', 'Fascicle', num2str(fascicleNumber), '.tiff')),'Resolution',600,'BackgroundColor','white');

figure();
plot(timeOverallCNAP, overallCNAP, 'Color', 'k', 'LineWidth',1.5);
xlim([0 60]);
ylabel('V_p_r_e_d (\muV)', 'FontSize',35,'FontWeight','bold');
xlabel('Time (ms)', 'FontSize',35,'FontWeight','bold');
fontsize(gca, 25, 'points');
set(gca, 'FontWeight','bold');
set(gca,'LooseInset',get(gca,'TightInset'));
set(gcf,'units','centimeters','position',[0,0,figureWidthCM,figureWidthCM])
exportgraphics(gca, fullfile(folderName, strcat('compositeCNAPTimeDomain',stimulationString, 'Fascicle', num2str(fascicleNumber), '.tiff')),'Resolution',600,'BackgroundColor','white');

figure();
timeOverallSeconds = timeOverallCNAP / 1000;
semilogx(conductionDist./timeOverallSeconds, overallCNAP, 'k', 'LineWidth', 1.5);
set ( gca, 'XDir', 'reverse' ) %shows the fastest fibers first 
% hold on;
% plot(timeOverallCNAP,signalUnmyelinated, 'Color',[0.5 0.5 0.5],'LineWidth',0.7);
ylabel('V_p_r_e_d (\muV)', 'FontSize',35,'FontWeight','bold');
xlabel('Conduction Velocity (m/s)', 'FontSize',35,'FontWeight','bold');
xlim([0 max(timeOverallCNAP)]);
fontsize(gca, 25, 'points');
set(gca, 'FontWeight','bold');
grid on;
set(gca,'xminorgrid','on','yminorgrid','on');
hold off;
set(gca,'LooseInset',get(gca,'TightInset'));
set(gcf,'units','centimeters','position',[0,0,figureWidthCM,figureWidthCM])
set(gca, 'XTick', [1 10]);
xtickformat('%.0e');
exportgraphics(gca, fullfile(folderName, strcat('compositeCNAPVelocityDomain',stimulationString, 'Fascicle', num2str(fascicleNumber), '.tiff')),'Resolution',600,'BackgroundColor','white');
